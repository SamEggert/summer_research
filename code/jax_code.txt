# ************************************************************************
# FAUST Architecture File
# Copyright (C) 2022 GRAME, Centre National de Creation Musicale
# ---------------------------------------------------------------------

# This is sample code. This file is provided as an example of minimal
# FAUST architecture file. Redistribution and use in source and binary
# forms, with or without modification, in part or in full are permitted.
# In particular you can create a derived work of this FAUST architecture
# and distribute that work under terms of your choice.

# This sample code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# ************************************************************************

import json
import re
import dataclasses
from pathlib import Path
from typing import List

import numpy as np
import librosa
import jax
import jax.numpy as jnp
from jax import random
from flax import linen as nn

# Generated code
"""
Code generated with Faust version 2.69.3
Compilation options: -a jax/minimal.py -lang jax -ct 1 -cn FaustVoice -es 1 -mcd 16 -single -ftz 0 
"""

# enable single precision
FAUSTFLOAT = jnp.float32

class FaustVoice(nn.Module):
	
	sample_rate: int
	soundfile_dirs: list[str] = dataclasses.field(default_factory=list)
	
	def getNumInputs(self):
		return 3 
	
	def getNumOutputs(self):
		return 1 
	
	def initialize(self, x, T):
		state = {}
		
		# global declarations:
		state["fVec0"] = np.zeros((2,), dtype=np.float64)
		state["iVec1"] = np.zeros((2,), dtype=np.int32)
		state["fRec0"] = np.zeros((2,), dtype=np.float64)
		state["iRec1"] = np.zeros((2,), dtype=np.int32)
		state["fRec2"] = np.zeros((2,), dtype=np.float64)
		
		# inline subcontainers:
		
		# init constants:
		state["fSampleRate"] = self.sample_rate 
		fConst0 = np.minimum(1.92e+05, np.maximum(1.0, (state["fSampleRate"]))) 
		state["fConst1"] = (1.0 / np.maximum(1.0, (0.01 * fConst0))) 
		state["fConst2"] = (1.0 / np.maximum(1.0, (0.1 * fConst0))) 
		state["fConst3"] = (1.0 / fConst0) 
		
		# instance clear:
		
		return state

	def getJSON(self):
		json_str = """{\"name\": \"dawdreamer\",\"filename\": \"\",\"version\": \"2.69.3\",\"compile_options\": \"-a jax/minimal.py -lang jax -ct 1 -cn FaustVoice -es 1 -mcd 16 -single -ftz 0\",\"library_list\": [\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/stdfaust.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/oscillators.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/basics.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/maths.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/platform.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/signals.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/interpolators.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/routes.lib\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries/envelopes.lib\"],\"include_pathnames\": [\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries\",\"/Users/samueleggert/GitHub/summer_research/code\",\"/Users/samueleggert/GitHub/summer_research/venv/lib/python3.9/site-packages/dawdreamer/faustlibraries\",\"/opt/homebrew/Cellar/faust/2.72.14_1/share/faust\",\"/usr/local/share/faust\",\"/usr/share/faust\",\".\",\"/opt/homebrew/Cellar/faust/2.72.14_1/share/faust\",\"/usr/local/share/faust\",\"/usr/share/faust\",\".\"],\"size\": 188,\"inputs\": 3,\"outputs\": 1,\"meta\": [ { \"compile_options\": \"-a jax/minimal.py -lang jax -ct 1 -cn FaustVoice -es 1 -mcd 16 -single -ftz 0\" },{ \"name\": \"dawdreamer\" }],\"ui\": [ {\"type\": \"vgroup\",\"label\": \"dawdreamer\",\"items\": [ {\"type\": \"hslider\",\"label\": \"WT Pos\",\"shortname\": \"WT_Pos\",\"address\": \"/dawdreamer/WT_Pos\",\"meta\": [{ \"style\": \"knob\" }],\"init\": 0,\"min\": 0,\"max\": 1,\"step\": 0.01},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_001\",\"url\": \"{'MB Saw_001.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_001\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_017\",\"url\": \"{'MB Saw_017.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_017\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_033\",\"url\": \"{'MB Saw_033.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_033\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_049\",\"url\": \"{'MB Saw_049.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_049\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_065\",\"url\": \"{'MB Saw_065.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_065\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_081\",\"url\": \"{'MB Saw_081.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_081\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_097\",\"url\": \"{'MB Saw_097.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_097\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_113\",\"url\": \"{'MB Saw_113.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_113\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_129\",\"url\": \"{'MB Saw_129.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_129\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_145\",\"url\": \"{'MB Saw_145.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_145\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_161\",\"url\": \"{'MB Saw_161.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_161\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_177\",\"url\": \"{'MB Saw_177.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_177\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_193\",\"url\": \"{'MB Saw_193.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_193\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_209\",\"url\": \"{'MB Saw_209.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_209\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_225\",\"url\": \"{'MB Saw_225.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_225\"},{\"type\": \"soundfile\",\"label\": \"param:MB Saw_241\",\"url\": \"{'MB Saw_241.wav'}\",\"address\": \"/dawdreamer/param:MB_Saw_241\"}]}]}"""
		return json.loads(json_str)
	
	def build_interface(self, state, x, T: int):
		ui_path = []
		ui_path.append("dawdreamer") 
		self.add_slider(state, "fHslider0", ui_path, "WT Pos", 0.0, 0.0, 1.0, "linear") 
		self.add_soundfile(state, "fSoundfile0", ui_path, "param:MB Saw_001", "{'MB Saw_001.wav'}", x) 
		self.add_soundfile(state, "fSoundfile10", ui_path, "param:MB Saw_017", "{'MB Saw_017.wav'}", x) 
		self.add_soundfile(state, "fSoundfile9", ui_path, "param:MB Saw_033", "{'MB Saw_033.wav'}", x) 
		self.add_soundfile(state, "fSoundfile8", ui_path, "param:MB Saw_049", "{'MB Saw_049.wav'}", x) 
		self.add_soundfile(state, "fSoundfile7", ui_path, "param:MB Saw_065", "{'MB Saw_065.wav'}", x) 
		self.add_soundfile(state, "fSoundfile6", ui_path, "param:MB Saw_081", "{'MB Saw_081.wav'}", x) 
		self.add_soundfile(state, "fSoundfile5", ui_path, "param:MB Saw_097", "{'MB Saw_097.wav'}", x) 
		self.add_soundfile(state, "fSoundfile4", ui_path, "param:MB Saw_113", "{'MB Saw_113.wav'}", x) 
		self.add_soundfile(state, "fSoundfile11", ui_path, "param:MB Saw_129", "{'MB Saw_129.wav'}", x) 
		self.add_soundfile(state, "fSoundfile12", ui_path, "param:MB Saw_145", "{'MB Saw_145.wav'}", x) 
		self.add_soundfile(state, "fSoundfile13", ui_path, "param:MB Saw_161", "{'MB Saw_161.wav'}", x) 
		self.add_soundfile(state, "fSoundfile14", ui_path, "param:MB Saw_177", "{'MB Saw_177.wav'}", x) 
		self.add_soundfile(state, "fSoundfile15", ui_path, "param:MB Saw_193", "{'MB Saw_193.wav'}", x) 
		self.add_soundfile(state, "fSoundfile3", ui_path, "param:MB Saw_209", "{'MB Saw_209.wav'}", x) 
		self.add_soundfile(state, "fSoundfile2", ui_path, "param:MB Saw_225", "{'MB Saw_225.wav'}", x) 
		self.add_soundfile(state, "fSoundfile1", ui_path, "param:MB Saw_241", "{'MB Saw_241.wav'}", x) 
		ui_path.pop()
		
		return state
	
	@staticmethod
	def tick(state: dict, inputs: jnp.array):
		
		fSlow0 = state["fHslider0"] 
		fSlow1 = jnp.maximum(0.0, (1.0 - jnp.abs((-15.0 * fSlow0)))) 
		fSoundfile0ca = state["fSoundfile0"] 
		fSoundfile0ca_le0 = fSoundfile0ca["fLength"] 
		iSlow2 = fSoundfile0ca_le0[0] 
		iSlow3 = (iSlow2 + -1) 
		fSoundfile0ca_of0 = fSoundfile0ca["fOffset"] 
		fSoundfile0ca_bu0 = (fSoundfile0ca["fBuffers"]) 
		fSoundfile0ca_bu_ch0 = fSoundfile0ca_bu0[0] 
		fSoundfile0ca_of1 = fSoundfile0ca["fOffset"] 
		fSoundfile0ca_bu1 = (fSoundfile0ca["fBuffers"]) 
		fSoundfile0ca_bu_ch1 = fSoundfile0ca_bu1[0] 
		fSoundfile0ca_of2 = fSoundfile0ca["fOffset"] 
		fSoundfile0ca_bu2 = (fSoundfile0ca["fBuffers"]) 
		fSoundfile0ca_bu_ch2 = fSoundfile0ca_bu2[0] 
		fSoundfile0ca_of3 = fSoundfile0ca["fOffset"] 
		fSoundfile0ca_bu3 = (fSoundfile0ca["fBuffers"]) 
		fSoundfile0ca_bu_ch3 = fSoundfile0ca_bu3[0] 
		fSlow4 = jnp.maximum(0.0, (1.0 - jnp.abs((15.0 * (1.0 - fSlow0))))) 
		fSoundfile1ca = state["fSoundfile1"] 
		fSoundfile1ca_le0 = fSoundfile1ca["fLength"] 
		iSlow5 = fSoundfile1ca_le0[0] 
		iSlow6 = (iSlow5 + -1) 
		fSoundfile1ca_of0 = fSoundfile1ca["fOffset"] 
		fSoundfile1ca_bu0 = (fSoundfile1ca["fBuffers"]) 
		fSoundfile1ca_bu_ch0 = fSoundfile1ca_bu0[0] 
		fSoundfile1ca_of1 = fSoundfile1ca["fOffset"] 
		fSoundfile1ca_bu1 = (fSoundfile1ca["fBuffers"]) 
		fSoundfile1ca_bu_ch1 = fSoundfile1ca_bu1[0] 
		fSoundfile1ca_of2 = fSoundfile1ca["fOffset"] 
		fSoundfile1ca_bu2 = (fSoundfile1ca["fBuffers"]) 
		fSoundfile1ca_bu_ch2 = fSoundfile1ca_bu2[0] 
		fSoundfile1ca_of3 = fSoundfile1ca["fOffset"] 
		fSoundfile1ca_bu3 = (fSoundfile1ca["fBuffers"]) 
		fSoundfile1ca_bu_ch3 = fSoundfile1ca_bu3[0] 
		fSlow7 = (15.0 * fSlow0) 
		fSlow8 = jnp.maximum(0.0, (1.0 - jnp.abs((14.0 - fSlow7)))) 
		fSoundfile2ca = state["fSoundfile2"] 
		fSoundfile2ca_le0 = fSoundfile2ca["fLength"] 
		iSlow9 = fSoundfile2ca_le0[0] 
		iSlow10 = (iSlow9 + -1) 
		fSoundfile2ca_of0 = fSoundfile2ca["fOffset"] 
		fSoundfile2ca_bu0 = (fSoundfile2ca["fBuffers"]) 
		fSoundfile2ca_bu_ch0 = fSoundfile2ca_bu0[0] 
		fSoundfile2ca_of1 = fSoundfile2ca["fOffset"] 
		fSoundfile2ca_bu1 = (fSoundfile2ca["fBuffers"]) 
		fSoundfile2ca_bu_ch1 = fSoundfile2ca_bu1[0] 
		fSoundfile2ca_of2 = fSoundfile2ca["fOffset"] 
		fSoundfile2ca_bu2 = (fSoundfile2ca["fBuffers"]) 
		fSoundfile2ca_bu_ch2 = fSoundfile2ca_bu2[0] 
		fSoundfile2ca_of3 = fSoundfile2ca["fOffset"] 
		fSoundfile2ca_bu3 = (fSoundfile2ca["fBuffers"]) 
		fSoundfile2ca_bu_ch3 = fSoundfile2ca_bu3[0] 
		fSlow11 = jnp.maximum(0.0, (1.0 - jnp.abs((13.0 - fSlow7)))) 
		fSoundfile3ca = state["fSoundfile3"] 
		fSoundfile3ca_le0 = fSoundfile3ca["fLength"] 
		iSlow12 = fSoundfile3ca_le0[0] 
		iSlow13 = (iSlow12 + -1) 
		fSoundfile3ca_of0 = fSoundfile3ca["fOffset"] 
		fSoundfile3ca_bu0 = (fSoundfile3ca["fBuffers"]) 
		fSoundfile3ca_bu_ch0 = fSoundfile3ca_bu0[0] 
		fSoundfile3ca_of1 = fSoundfile3ca["fOffset"] 
		fSoundfile3ca_bu1 = (fSoundfile3ca["fBuffers"]) 
		fSoundfile3ca_bu_ch1 = fSoundfile3ca_bu1[0] 
		fSoundfile3ca_of2 = fSoundfile3ca["fOffset"] 
		fSoundfile3ca_bu2 = (fSoundfile3ca["fBuffers"]) 
		fSoundfile3ca_bu_ch2 = fSoundfile3ca_bu2[0] 
		fSoundfile3ca_of3 = fSoundfile3ca["fOffset"] 
		fSoundfile3ca_bu3 = (fSoundfile3ca["fBuffers"]) 
		fSoundfile3ca_bu_ch3 = fSoundfile3ca_bu3[0] 
		fSlow14 = jnp.maximum(0.0, (1.0 - jnp.abs((7.0 - fSlow7)))) 
		fSoundfile4ca = state["fSoundfile4"] 
		fSoundfile4ca_le0 = fSoundfile4ca["fLength"] 
		iSlow15 = fSoundfile4ca_le0[0] 
		iSlow16 = (iSlow15 + -1) 
		fSoundfile4ca_of0 = fSoundfile4ca["fOffset"] 
		fSoundfile4ca_bu0 = (fSoundfile4ca["fBuffers"]) 
		fSoundfile4ca_bu_ch0 = fSoundfile4ca_bu0[0] 
		fSoundfile4ca_of1 = fSoundfile4ca["fOffset"] 
		fSoundfile4ca_bu1 = (fSoundfile4ca["fBuffers"]) 
		fSoundfile4ca_bu_ch1 = fSoundfile4ca_bu1[0] 
		fSoundfile4ca_of2 = fSoundfile4ca["fOffset"] 
		fSoundfile4ca_bu2 = (fSoundfile4ca["fBuffers"]) 
		fSoundfile4ca_bu_ch2 = fSoundfile4ca_bu2[0] 
		fSoundfile4ca_of3 = fSoundfile4ca["fOffset"] 
		fSoundfile4ca_bu3 = (fSoundfile4ca["fBuffers"]) 
		fSoundfile4ca_bu_ch3 = fSoundfile4ca_bu3[0] 
		fSlow17 = jnp.maximum(0.0, (1.0 - jnp.abs((6.0 - fSlow7)))) 
		fSoundfile5ca = state["fSoundfile5"] 
		fSoundfile5ca_le0 = fSoundfile5ca["fLength"] 
		iSlow18 = fSoundfile5ca_le0[0] 
		iSlow19 = (iSlow18 + -1) 
		fSoundfile5ca_of0 = fSoundfile5ca["fOffset"] 
		fSoundfile5ca_bu0 = (fSoundfile5ca["fBuffers"]) 
		fSoundfile5ca_bu_ch0 = fSoundfile5ca_bu0[0] 
		fSoundfile5ca_of1 = fSoundfile5ca["fOffset"] 
		fSoundfile5ca_bu1 = (fSoundfile5ca["fBuffers"]) 
		fSoundfile5ca_bu_ch1 = fSoundfile5ca_bu1[0] 
		fSoundfile5ca_of2 = fSoundfile5ca["fOffset"] 
		fSoundfile5ca_bu2 = (fSoundfile5ca["fBuffers"]) 
		fSoundfile5ca_bu_ch2 = fSoundfile5ca_bu2[0] 
		fSoundfile5ca_of3 = fSoundfile5ca["fOffset"] 
		fSoundfile5ca_bu3 = (fSoundfile5ca["fBuffers"]) 
		fSoundfile5ca_bu_ch3 = fSoundfile5ca_bu3[0] 
		fSlow20 = jnp.maximum(0.0, (1.0 - jnp.abs((5.0 - fSlow7)))) 
		fSoundfile6ca = state["fSoundfile6"] 
		fSoundfile6ca_le0 = fSoundfile6ca["fLength"] 
		iSlow21 = fSoundfile6ca_le0[0] 
		iSlow22 = (iSlow21 + -1) 
		fSoundfile6ca_of0 = fSoundfile6ca["fOffset"] 
		fSoundfile6ca_bu0 = (fSoundfile6ca["fBuffers"]) 
		fSoundfile6ca_bu_ch0 = fSoundfile6ca_bu0[0] 
		fSoundfile6ca_of1 = fSoundfile6ca["fOffset"] 
		fSoundfile6ca_bu1 = (fSoundfile6ca["fBuffers"]) 
		fSoundfile6ca_bu_ch1 = fSoundfile6ca_bu1[0] 
		fSoundfile6ca_of2 = fSoundfile6ca["fOffset"] 
		fSoundfile6ca_bu2 = (fSoundfile6ca["fBuffers"]) 
		fSoundfile6ca_bu_ch2 = fSoundfile6ca_bu2[0] 
		fSoundfile6ca_of3 = fSoundfile6ca["fOffset"] 
		fSoundfile6ca_bu3 = (fSoundfile6ca["fBuffers"]) 
		fSoundfile6ca_bu_ch3 = fSoundfile6ca_bu3[0] 
		fSlow23 = jnp.maximum(0.0, (1.0 - jnp.abs((4.0 - fSlow7)))) 
		fSoundfile7ca = state["fSoundfile7"] 
		fSoundfile7ca_le0 = fSoundfile7ca["fLength"] 
		iSlow24 = fSoundfile7ca_le0[0] 
		iSlow25 = (iSlow24 + -1) 
		fSoundfile7ca_of0 = fSoundfile7ca["fOffset"] 
		fSoundfile7ca_bu0 = (fSoundfile7ca["fBuffers"]) 
		fSoundfile7ca_bu_ch0 = fSoundfile7ca_bu0[0] 
		fSoundfile7ca_of1 = fSoundfile7ca["fOffset"] 
		fSoundfile7ca_bu1 = (fSoundfile7ca["fBuffers"]) 
		fSoundfile7ca_bu_ch1 = fSoundfile7ca_bu1[0] 
		fSoundfile7ca_of2 = fSoundfile7ca["fOffset"] 
		fSoundfile7ca_bu2 = (fSoundfile7ca["fBuffers"]) 
		fSoundfile7ca_bu_ch2 = fSoundfile7ca_bu2[0] 
		fSoundfile7ca_of3 = fSoundfile7ca["fOffset"] 
		fSoundfile7ca_bu3 = (fSoundfile7ca["fBuffers"]) 
		fSoundfile7ca_bu_ch3 = fSoundfile7ca_bu3[0] 
		fSlow26 = jnp.maximum(0.0, (1.0 - jnp.abs((3.0 - fSlow7)))) 
		fSoundfile8ca = state["fSoundfile8"] 
		fSoundfile8ca_le0 = fSoundfile8ca["fLength"] 
		iSlow27 = fSoundfile8ca_le0[0] 
		iSlow28 = (iSlow27 + -1) 
		fSoundfile8ca_of0 = fSoundfile8ca["fOffset"] 
		fSoundfile8ca_bu0 = (fSoundfile8ca["fBuffers"]) 
		fSoundfile8ca_bu_ch0 = fSoundfile8ca_bu0[0] 
		fSoundfile8ca_of1 = fSoundfile8ca["fOffset"] 
		fSoundfile8ca_bu1 = (fSoundfile8ca["fBuffers"]) 
		fSoundfile8ca_bu_ch1 = fSoundfile8ca_bu1[0] 
		fSoundfile8ca_of2 = fSoundfile8ca["fOffset"] 
		fSoundfile8ca_bu2 = (fSoundfile8ca["fBuffers"]) 
		fSoundfile8ca_bu_ch2 = fSoundfile8ca_bu2[0] 
		fSoundfile8ca_of3 = fSoundfile8ca["fOffset"] 
		fSoundfile8ca_bu3 = (fSoundfile8ca["fBuffers"]) 
		fSoundfile8ca_bu_ch3 = fSoundfile8ca_bu3[0] 
		fSlow29 = jnp.maximum(0.0, (1.0 - jnp.abs((2.0 - fSlow7)))) 
		fSoundfile9ca = state["fSoundfile9"] 
		fSoundfile9ca_le0 = fSoundfile9ca["fLength"] 
		iSlow30 = fSoundfile9ca_le0[0] 
		iSlow31 = (iSlow30 + -1) 
		fSoundfile9ca_of0 = fSoundfile9ca["fOffset"] 
		fSoundfile9ca_bu0 = (fSoundfile9ca["fBuffers"]) 
		fSoundfile9ca_bu_ch0 = fSoundfile9ca_bu0[0] 
		fSoundfile9ca_of1 = fSoundfile9ca["fOffset"] 
		fSoundfile9ca_bu1 = (fSoundfile9ca["fBuffers"]) 
		fSoundfile9ca_bu_ch1 = fSoundfile9ca_bu1[0] 
		fSoundfile9ca_of2 = fSoundfile9ca["fOffset"] 
		fSoundfile9ca_bu2 = (fSoundfile9ca["fBuffers"]) 
		fSoundfile9ca_bu_ch2 = fSoundfile9ca_bu2[0] 
		fSoundfile9ca_of3 = fSoundfile9ca["fOffset"] 
		fSoundfile9ca_bu3 = (fSoundfile9ca["fBuffers"]) 
		fSoundfile9ca_bu_ch3 = fSoundfile9ca_bu3[0] 
		fSlow32 = jnp.maximum(0.0, (1.0 - jnp.abs((1.0 - fSlow7)))) 
		fSoundfile10ca = state["fSoundfile10"] 
		fSoundfile10ca_le0 = fSoundfile10ca["fLength"] 
		iSlow33 = fSoundfile10ca_le0[0] 
		iSlow34 = (iSlow33 + -1) 
		fSoundfile10ca_of0 = fSoundfile10ca["fOffset"] 
		fSoundfile10ca_bu0 = (fSoundfile10ca["fBuffers"]) 
		fSoundfile10ca_bu_ch0 = fSoundfile10ca_bu0[0] 
		fSoundfile10ca_of1 = fSoundfile10ca["fOffset"] 
		fSoundfile10ca_bu1 = (fSoundfile10ca["fBuffers"]) 
		fSoundfile10ca_bu_ch1 = fSoundfile10ca_bu1[0] 
		fSoundfile10ca_of2 = fSoundfile10ca["fOffset"] 
		fSoundfile10ca_bu2 = (fSoundfile10ca["fBuffers"]) 
		fSoundfile10ca_bu_ch2 = fSoundfile10ca_bu2[0] 
		fSoundfile10ca_of3 = fSoundfile10ca["fOffset"] 
		fSoundfile10ca_bu3 = (fSoundfile10ca["fBuffers"]) 
		fSoundfile10ca_bu_ch3 = fSoundfile10ca_bu3[0] 
		fSlow35 = jnp.maximum(0.0, (1.0 - jnp.abs((8.0 - fSlow7)))) 
		fSoundfile11ca = state["fSoundfile11"] 
		fSoundfile11ca_le0 = fSoundfile11ca["fLength"] 
		iSlow36 = fSoundfile11ca_le0[0] 
		iSlow37 = (iSlow36 + -1) 
		fSoundfile11ca_of0 = fSoundfile11ca["fOffset"] 
		fSoundfile11ca_bu0 = (fSoundfile11ca["fBuffers"]) 
		fSoundfile11ca_bu_ch0 = fSoundfile11ca_bu0[0] 
		fSoundfile11ca_of1 = fSoundfile11ca["fOffset"] 
		fSoundfile11ca_bu1 = (fSoundfile11ca["fBuffers"]) 
		fSoundfile11ca_bu_ch1 = fSoundfile11ca_bu1[0] 
		fSoundfile11ca_of2 = fSoundfile11ca["fOffset"] 
		fSoundfile11ca_bu2 = (fSoundfile11ca["fBuffers"]) 
		fSoundfile11ca_bu_ch2 = fSoundfile11ca_bu2[0] 
		fSoundfile11ca_of3 = fSoundfile11ca["fOffset"] 
		fSoundfile11ca_bu3 = (fSoundfile11ca["fBuffers"]) 
		fSoundfile11ca_bu_ch3 = fSoundfile11ca_bu3[0] 
		fSlow38 = jnp.maximum(0.0, (1.0 - jnp.abs((9.0 - fSlow7)))) 
		fSoundfile12ca = state["fSoundfile12"] 
		fSoundfile12ca_le0 = fSoundfile12ca["fLength"] 
		iSlow39 = fSoundfile12ca_le0[0] 
		iSlow40 = (iSlow39 + -1) 
		fSoundfile12ca_of0 = fSoundfile12ca["fOffset"] 
		fSoundfile12ca_bu0 = (fSoundfile12ca["fBuffers"]) 
		fSoundfile12ca_bu_ch0 = fSoundfile12ca_bu0[0] 
		fSoundfile12ca_of1 = fSoundfile12ca["fOffset"] 
		fSoundfile12ca_bu1 = (fSoundfile12ca["fBuffers"]) 
		fSoundfile12ca_bu_ch1 = fSoundfile12ca_bu1[0] 
		fSoundfile12ca_of2 = fSoundfile12ca["fOffset"] 
		fSoundfile12ca_bu2 = (fSoundfile12ca["fBuffers"]) 
		fSoundfile12ca_bu_ch2 = fSoundfile12ca_bu2[0] 
		fSoundfile12ca_of3 = fSoundfile12ca["fOffset"] 
		fSoundfile12ca_bu3 = (fSoundfile12ca["fBuffers"]) 
		fSoundfile12ca_bu_ch3 = fSoundfile12ca_bu3[0] 
		fSlow41 = jnp.maximum(0.0, (1.0 - jnp.abs((1e+01 - fSlow7)))) 
		fSoundfile13ca = state["fSoundfile13"] 
		fSoundfile13ca_le0 = fSoundfile13ca["fLength"] 
		iSlow42 = fSoundfile13ca_le0[0] 
		iSlow43 = (iSlow42 + -1) 
		fSoundfile13ca_of0 = fSoundfile13ca["fOffset"] 
		fSoundfile13ca_bu0 = (fSoundfile13ca["fBuffers"]) 
		fSoundfile13ca_bu_ch0 = fSoundfile13ca_bu0[0] 
		fSoundfile13ca_of1 = fSoundfile13ca["fOffset"] 
		fSoundfile13ca_bu1 = (fSoundfile13ca["fBuffers"]) 
		fSoundfile13ca_bu_ch1 = fSoundfile13ca_bu1[0] 
		fSoundfile13ca_of2 = fSoundfile13ca["fOffset"] 
		fSoundfile13ca_bu2 = (fSoundfile13ca["fBuffers"]) 
		fSoundfile13ca_bu_ch2 = fSoundfile13ca_bu2[0] 
		fSoundfile13ca_of3 = fSoundfile13ca["fOffset"] 
		fSoundfile13ca_bu3 = (fSoundfile13ca["fBuffers"]) 
		fSoundfile13ca_bu_ch3 = fSoundfile13ca_bu3[0] 
		fSlow44 = jnp.maximum(0.0, (1.0 - jnp.abs((11.0 - fSlow7)))) 
		fSoundfile14ca = state["fSoundfile14"] 
		fSoundfile14ca_le0 = fSoundfile14ca["fLength"] 
		iSlow45 = fSoundfile14ca_le0[0] 
		iSlow46 = (iSlow45 + -1) 
		fSoundfile14ca_of0 = fSoundfile14ca["fOffset"] 
		fSoundfile14ca_bu0 = (fSoundfile14ca["fBuffers"]) 
		fSoundfile14ca_bu_ch0 = fSoundfile14ca_bu0[0] 
		fSoundfile14ca_of1 = fSoundfile14ca["fOffset"] 
		fSoundfile14ca_bu1 = (fSoundfile14ca["fBuffers"]) 
		fSoundfile14ca_bu_ch1 = fSoundfile14ca_bu1[0] 
		fSoundfile14ca_of2 = fSoundfile14ca["fOffset"] 
		fSoundfile14ca_bu2 = (fSoundfile14ca["fBuffers"]) 
		fSoundfile14ca_bu_ch2 = fSoundfile14ca_bu2[0] 
		fSoundfile14ca_of3 = fSoundfile14ca["fOffset"] 
		fSoundfile14ca_bu3 = (fSoundfile14ca["fBuffers"]) 
		fSoundfile14ca_bu_ch3 = fSoundfile14ca_bu3[0] 
		fSlow47 = jnp.maximum(0.0, (1.0 - jnp.abs((12.0 - fSlow7)))) 
		fSoundfile15ca = state["fSoundfile15"] 
		fSoundfile15ca_le0 = fSoundfile15ca["fLength"] 
		iSlow48 = fSoundfile15ca_le0[0] 
		iSlow49 = (iSlow48 + -1) 
		fSoundfile15ca_of0 = fSoundfile15ca["fOffset"] 
		fSoundfile15ca_bu0 = (fSoundfile15ca["fBuffers"]) 
		fSoundfile15ca_bu_ch0 = fSoundfile15ca_bu0[0] 
		fSoundfile15ca_of1 = fSoundfile15ca["fOffset"] 
		fSoundfile15ca_bu1 = (fSoundfile15ca["fBuffers"]) 
		fSoundfile15ca_bu_ch1 = fSoundfile15ca_bu1[0] 
		fSoundfile15ca_of2 = fSoundfile15ca["fOffset"] 
		fSoundfile15ca_bu2 = (fSoundfile15ca["fBuffers"]) 
		fSoundfile15ca_bu_ch2 = fSoundfile15ca_bu2[0] 
		fSoundfile15ca_of3 = fSoundfile15ca["fOffset"] 
		fSoundfile15ca_bu3 = (fSoundfile15ca["fBuffers"]) 
		fSoundfile15ca_bu_ch3 = fSoundfile15ca_bu3[0] 
		fTemp0 = inputs[2] 
		state["fVec0"] = state["fVec0"].at[0].set(fTemp0) 
		state["iVec1"] = state["iVec1"].at[0].set(1) 
		state["fRec0"] = state["fRec0"].at[0].set((fTemp0 + (state["fRec0"][1] * ((state["fVec0"][1] >= fTemp0).astype(jnp.int32))))) 
		state["iRec1"] = state["iRec1"].at[0].set(((fTemp0 == 0.0).astype(jnp.int32) * (state["iRec1"][1] + 1))) 
		fTemp1 = (fTemp0 - state["fVec0"][1]) 
		fTemp2 = jnp.where((((1 - state["iVec1"][1]) | jnp.int32((fTemp1 * ((fTemp1 > 0.0).astype(jnp.int32))))).astype(jnp.int32) != 0), 0.0, (state["fRec2"][1] + (state["fConst3"] * inputs[0]))) 
		state["fRec2"] = state["fRec2"].at[0].set((fTemp2 - jnp.floor(fTemp2))) 
		fTemp3 = (2048.0 * state["fRec2"][0]) 
		fTemp4 = jnp.floor(fTemp3) 
		fTemp5 = (fTemp3 + (-2.0 - fTemp4)) 
		fTemp6 = (fTemp3 + (-1.0 - fTemp4)) 
		fTemp7 = (fTemp3 + (1.0 - fTemp4)) 
		iTemp8 = jnp.int32(fTemp3) 
		fTemp9 = (fTemp3 - fTemp4) 
		iTemp10 = (iTemp8 + -1) 
		fTemp11 = (fTemp9 * fTemp7) 
		iTemp12 = (iTemp8 + 1) 
		fTemp13 = (fTemp11 * fTemp6) 
		iTemp14 = (iTemp8 + 2) 
		_result0 = ((inputs[1] * jnp.maximum(0.0, (jnp.minimum((state["fConst1"] * state["fRec0"][0]), 1.0) * (1.0 - (state["fConst2"] * (state["iRec1"][0])))))) * ((fSlow1 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile0ca_bu_ch0[(fSoundfile0ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow2 + (iTemp8 % iSlow2)) % iSlow2), iSlow3)))])) - (0.16666667 * (fTemp9 * fSoundfile0ca_bu_ch1[(fSoundfile0ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow2 + (iTemp10 % iSlow2)) % iSlow2), iSlow3)))])))) - (0.5 * (fTemp11 * fSoundfile0ca_bu_ch2[(fSoundfile0ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow2 + (iTemp12 % iSlow2)) % iSlow2), iSlow3)))])))) + (0.16666667 * (fTemp13 * fSoundfile0ca_bu_ch3[(fSoundfile0ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow2 + (iTemp14 % iSlow2)) % iSlow2), iSlow3)))])))) + ((fSlow4 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile1ca_bu_ch0[(fSoundfile1ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow5 + (iTemp8 % iSlow5)) % iSlow5), iSlow6)))])) - (0.16666667 * (fTemp9 * fSoundfile1ca_bu_ch1[(fSoundfile1ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow5 + (iTemp10 % iSlow5)) % iSlow5), iSlow6)))])))) - (0.5 * (fTemp11 * fSoundfile1ca_bu_ch2[(fSoundfile1ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow5 + (iTemp12 % iSlow5)) % iSlow5), iSlow6)))])))) + (0.16666667 * (fTemp13 * fSoundfile1ca_bu_ch3[(fSoundfile1ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow5 + (iTemp14 % iSlow5)) % iSlow5), iSlow6)))])))) + ((fSlow8 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile2ca_bu_ch0[(fSoundfile2ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow9 + (iTemp8 % iSlow9)) % iSlow9), iSlow10)))])) - (0.16666667 * (fTemp9 * fSoundfile2ca_bu_ch1[(fSoundfile2ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow9 + (iTemp10 % iSlow9)) % iSlow9), iSlow10)))])))) - (0.5 * (fTemp11 * fSoundfile2ca_bu_ch2[(fSoundfile2ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow9 + (iTemp12 % iSlow9)) % iSlow9), iSlow10)))])))) + (0.16666667 * (fTemp13 * fSoundfile2ca_bu_ch3[(fSoundfile2ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow9 + (iTemp14 % iSlow9)) % iSlow9), iSlow10)))])))) + ((fSlow11 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile3ca_bu_ch0[(fSoundfile3ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow12 + (iTemp8 % iSlow12)) % iSlow12), iSlow13)))])) - (0.16666667 * (fTemp9 * fSoundfile3ca_bu_ch1[(fSoundfile3ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow12 + (iTemp10 % iSlow12)) % iSlow12), iSlow13)))])))) - (0.5 * (fTemp11 * fSoundfile3ca_bu_ch2[(fSoundfile3ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow12 + (iTemp12 % iSlow12)) % iSlow12), iSlow13)))])))) + (0.16666667 * (fTemp13 * fSoundfile3ca_bu_ch3[(fSoundfile3ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow12 + (iTemp14 % iSlow12)) % iSlow12), iSlow13)))])))) + ((fSlow14 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile4ca_bu_ch0[(fSoundfile4ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow15 + (iTemp8 % iSlow15)) % iSlow15), iSlow16)))])) - (0.16666667 * (fTemp9 * fSoundfile4ca_bu_ch1[(fSoundfile4ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow15 + (iTemp10 % iSlow15)) % iSlow15), iSlow16)))])))) - (0.5 * (fTemp11 * fSoundfile4ca_bu_ch2[(fSoundfile4ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow15 + (iTemp12 % iSlow15)) % iSlow15), iSlow16)))])))) + (0.16666667 * (fTemp13 * fSoundfile4ca_bu_ch3[(fSoundfile4ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow15 + (iTemp14 % iSlow15)) % iSlow15), iSlow16)))])))) + ((fSlow17 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile5ca_bu_ch0[(fSoundfile5ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow18 + (iTemp8 % iSlow18)) % iSlow18), iSlow19)))])) - (0.16666667 * (fTemp9 * fSoundfile5ca_bu_ch1[(fSoundfile5ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow18 + (iTemp10 % iSlow18)) % iSlow18), iSlow19)))])))) - (0.5 * (fTemp11 * fSoundfile5ca_bu_ch2[(fSoundfile5ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow18 + (iTemp12 % iSlow18)) % iSlow18), iSlow19)))])))) + (0.16666667 * (fTemp13 * fSoundfile5ca_bu_ch3[(fSoundfile5ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow18 + (iTemp14 % iSlow18)) % iSlow18), iSlow19)))])))) + ((fSlow20 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile6ca_bu_ch0[(fSoundfile6ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow21 + (iTemp8 % iSlow21)) % iSlow21), iSlow22)))])) - (0.16666667 * (fTemp9 * fSoundfile6ca_bu_ch1[(fSoundfile6ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow21 + (iTemp10 % iSlow21)) % iSlow21), iSlow22)))])))) - (0.5 * (fTemp11 * fSoundfile6ca_bu_ch2[(fSoundfile6ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow21 + (iTemp12 % iSlow21)) % iSlow21), iSlow22)))])))) + (0.16666667 * (fTemp13 * fSoundfile6ca_bu_ch3[(fSoundfile6ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow21 + (iTemp14 % iSlow21)) % iSlow21), iSlow22)))])))) + ((fSlow23 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile7ca_bu_ch0[(fSoundfile7ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow24 + (iTemp8 % iSlow24)) % iSlow24), iSlow25)))])) - (0.16666667 * (fTemp9 * fSoundfile7ca_bu_ch1[(fSoundfile7ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow24 + (iTemp10 % iSlow24)) % iSlow24), iSlow25)))])))) - (0.5 * (fTemp11 * fSoundfile7ca_bu_ch2[(fSoundfile7ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow24 + (iTemp12 % iSlow24)) % iSlow24), iSlow25)))])))) + (0.16666667 * (fTemp13 * fSoundfile7ca_bu_ch3[(fSoundfile7ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow24 + (iTemp14 % iSlow24)) % iSlow24), iSlow25)))])))) + ((fSlow26 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile8ca_bu_ch0[(fSoundfile8ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow27 + (iTemp8 % iSlow27)) % iSlow27), iSlow28)))])) - (0.16666667 * (fTemp9 * fSoundfile8ca_bu_ch1[(fSoundfile8ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow27 + (iTemp10 % iSlow27)) % iSlow27), iSlow28)))])))) - (0.5 * (fTemp11 * fSoundfile8ca_bu_ch2[(fSoundfile8ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow27 + (iTemp12 % iSlow27)) % iSlow27), iSlow28)))])))) + (0.16666667 * (fTemp13 * fSoundfile8ca_bu_ch3[(fSoundfile8ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow27 + (iTemp14 % iSlow27)) % iSlow27), iSlow28)))])))) + ((fSlow29 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile9ca_bu_ch0[(fSoundfile9ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow30 + (iTemp8 % iSlow30)) % iSlow30), iSlow31)))])) - (0.16666667 * (fTemp9 * fSoundfile9ca_bu_ch1[(fSoundfile9ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow30 + (iTemp10 % iSlow30)) % iSlow30), iSlow31)))])))) - (0.5 * (fTemp11 * fSoundfile9ca_bu_ch2[(fSoundfile9ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow30 + (iTemp12 % iSlow30)) % iSlow30), iSlow31)))])))) + (0.16666667 * (fTemp13 * fSoundfile9ca_bu_ch3[(fSoundfile9ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow30 + (iTemp14 % iSlow30)) % iSlow30), iSlow31)))])))) + ((fSlow32 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile10ca_bu_ch0[(fSoundfile10ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow33 + (iTemp8 % iSlow33)) % iSlow33), iSlow34)))])) - (0.16666667 * (fTemp9 * fSoundfile10ca_bu_ch1[(fSoundfile10ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow33 + (iTemp10 % iSlow33)) % iSlow33), iSlow34)))])))) - (0.5 * (fTemp11 * fSoundfile10ca_bu_ch2[(fSoundfile10ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow33 + (iTemp12 % iSlow33)) % iSlow33), iSlow34)))])))) + (0.16666667 * (fTemp13 * fSoundfile10ca_bu_ch3[(fSoundfile10ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow33 + (iTemp14 % iSlow33)) % iSlow33), iSlow34)))])))) + (((((fSlow35 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile11ca_bu_ch0[(fSoundfile11ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow36 + (iTemp8 % iSlow36)) % iSlow36), iSlow37)))])) - (0.16666667 * (fTemp9 * fSoundfile11ca_bu_ch1[(fSoundfile11ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow36 + (iTemp10 % iSlow36)) % iSlow36), iSlow37)))])))) - (0.5 * (fTemp11 * fSoundfile11ca_bu_ch2[(fSoundfile11ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow36 + (iTemp12 % iSlow36)) % iSlow36), iSlow37)))])))) + (0.16666667 * (fTemp13 * fSoundfile11ca_bu_ch3[(fSoundfile11ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow36 + (iTemp14 % iSlow36)) % iSlow36), iSlow37)))])))) + (fSlow38 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile12ca_bu_ch0[(fSoundfile12ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow39 + (iTemp8 % iSlow39)) % iSlow39), iSlow40)))])) - (0.16666667 * (fTemp9 * fSoundfile12ca_bu_ch1[(fSoundfile12ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow39 + (iTemp10 % iSlow39)) % iSlow39), iSlow40)))])))) - (0.5 * (fTemp11 * fSoundfile12ca_bu_ch2[(fSoundfile12ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow39 + (iTemp12 % iSlow39)) % iSlow39), iSlow40)))])))) + (0.16666667 * (fTemp13 * fSoundfile12ca_bu_ch3[(fSoundfile12ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow39 + (iTemp14 % iSlow39)) % iSlow39), iSlow40)))]))))) + (fSlow41 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile13ca_bu_ch0[(fSoundfile13ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow42 + (iTemp8 % iSlow42)) % iSlow42), iSlow43)))])) - (0.16666667 * (fTemp9 * fSoundfile13ca_bu_ch1[(fSoundfile13ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow42 + (iTemp10 % iSlow42)) % iSlow42), iSlow43)))])))) - (0.5 * (fTemp11 * fSoundfile13ca_bu_ch2[(fSoundfile13ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow42 + (iTemp12 % iSlow42)) % iSlow42), iSlow43)))])))) + (0.16666667 * (fTemp13 * fSoundfile13ca_bu_ch3[(fSoundfile13ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow42 + (iTemp14 % iSlow42)) % iSlow42), iSlow43)))]))))) + (fSlow44 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile14ca_bu_ch0[(fSoundfile14ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow45 + (iTemp8 % iSlow45)) % iSlow45), iSlow46)))])) - (0.16666667 * (fTemp9 * fSoundfile14ca_bu_ch1[(fSoundfile14ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow45 + (iTemp10 % iSlow45)) % iSlow45), iSlow46)))])))) - (0.5 * (fTemp11 * fSoundfile14ca_bu_ch2[(fSoundfile14ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow45 + (iTemp12 % iSlow45)) % iSlow45), iSlow46)))])))) + (0.16666667 * (fTemp13 * fSoundfile14ca_bu_ch3[(fSoundfile14ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow45 + (iTemp14 % iSlow45)) % iSlow45), iSlow46)))]))))) + (fSlow47 * ((fTemp5 * ((fTemp6 * ((0.5 * (fTemp7 * fSoundfile15ca_bu_ch0[(fSoundfile15ca_of0[0] + jnp.maximum(0, jnp.minimum(((iSlow48 + (iTemp8 % iSlow48)) % iSlow48), iSlow49)))])) - (0.16666667 * (fTemp9 * fSoundfile15ca_bu_ch1[(fSoundfile15ca_of1[0] + jnp.maximum(0, jnp.minimum(((iSlow48 + (iTemp10 % iSlow48)) % iSlow48), iSlow49)))])))) - (0.5 * (fTemp11 * fSoundfile15ca_bu_ch2[(fSoundfile15ca_of2[0] + jnp.maximum(0, jnp.minimum(((iSlow48 + (iTemp12 % iSlow48)) % iSlow48), iSlow49)))])))) + (0.16666667 * (fTemp13 * fSoundfile15ca_bu_ch3[(fSoundfile15ca_of3[0] + jnp.maximum(0, jnp.minimum(((iSlow48 + (iTemp14 % iSlow48)) % iSlow48), iSlow49)))]))))))))))))))))) 
		state["fVec0"] = jnp.roll(state["fVec0"], 1) 
		state["iVec1"] = jnp.roll(state["iVec1"], 1) 
		state["fRec0"] = jnp.roll(state["fRec0"], 1) 
		state["iRec1"] = jnp.roll(state["iRec1"], 1) 
		state["fRec2"] = jnp.roll(state["fRec2"], 1) 
		return state, jnp.stack([_result0]) 
		
	
	def load_soundfile(self, filepath: str):
		# soundfile_dirs should always include at least "".
		soundfile_dirs = [""] + list(self.soundfile_dirs)
		# Create a list of potential filepaths to check
		potential_paths = [Path(filepath)] if Path(filepath).is_absolute() else [Path(d) / filepath for d in soundfile_dirs]

		# Loop through potential paths and try to load the audio file
		for full_path in potential_paths:
			try:
				audio, sr = librosa.load(str(full_path), mono=False, sr=None)
				if audio.ndim == 1:
					audio = np.expand_dims(audio, 0)
				return audio, sr
			except FileNotFoundError:
				# If not found at this path, continue to the next
				continue
		
		# If none of the paths worked, return the default silence array and sample rate
		return np.zeros((1, 1024)), self.sample_rate
	
	def add_soundfile(self, state, zone: str, ui_path: List[str], label: str, url: str, x):
		# example url: {'tango.wav';'foo.wav';'bar/baz.wav'}
		filepaths = url[2:-2].split("';'")
		fLength, fOffset, fSR, offset = [], [], [], 0
		audio_data = [self.load_soundfile(filepath) for filepath in filepaths]
		num_chans = max([y.shape[0] for y, _ in audio_data])
		total_length = sum([y.shape[1] for y, _ in audio_data])
		fBuffers = jnp.zeros((num_chans, total_length))
		for y, sr in audio_data:
			fSR.append(sr)
			assert y.ndim == 2
			y = jnp.array(y)
			fLength.append(y.shape[1])
			fOffset.append(offset)
			fBuffers = fBuffers.at[:y.shape[0],offset:offset+y.shape[1]].set(y)
			offset += y.shape[1]
		if label.startswith('param:'):
			label = label[6:]  # remove "param:"
			label = "/".join(ui_path+[label])
			fBuffers = self.param("_"+label, (lambda key, shape: fBuffers), None)
		else:
			label = "/".join(ui_path+[label])
		self.sow('intermediates', label, fBuffers)
		state[zone] = {'fLength': fLength, 'fOffset': fOffset, 'fBuffers': fBuffers, 'fSR': fSR}

	def add_button(self, state, zone: str, ui_path: List[str], label: str):
		label = "/".join(ui_path+[label])
		param = self.param("_"+label, nn.initializers.constant(0.), ())
		param = jnp.where(param>0., 1., 0.)
		self.sow('intermediates', label, param)
		state[zone] = param
	
	def add_nentry(self, state, zone: str, ui_path: List[str], label: str, init: float, a_min: float, a_max: float, step_size: float, scale_mode='linear'):
		label = "/".join(ui_path+[label])
		num_steps = int(round((a_max-a_min)/step_size))+1
		init_unit = int(round(init-a_min)/step_size)
		param = jnp.ones((num_steps,))
		param = param.at[init_unit].set(2)
		param = nn.softmax(param)
		param = self.param("_"+label, (lambda key, shape: param), None)
		param = jnp.argmax(param, axis=-1)*step_size+a_min
		self.sow('intermediates', label, param)
		state[zone] = param
	
	def add_slider(self, state, zone: str, ui_path: List[str], label: str, init: float, a_min: float, a_max: float, scale_mode='linear'):
		label = "/".join(ui_path+[label])
		init, a_min, a_max = float(init), float(a_min), float(a_max)
		if scale_mode == 'linear':
			init = jnp.interp(init, jnp.array([a_min, a_max]), jnp.array([-1.,1.]))
			param = self.param("_"+label, nn.initializers.constant(init), ())
			param = jnp.clip(param, -1., 1.)
			param = jnp.interp(param, jnp.array([-1., 1.]), jnp.array([a_min, a_max]))
		elif scale_mode == 'exp':
			init = jnp.interp(init, jnp.array([a_min, a_max]), jnp.array([1., jnp.e]))
			init = jnp.log(init)
			init = jnp.interp(init, jnp.array([0., 1.]), jnp.array([-1.,1.]))
			param = self.param("_"+label, nn.initializers.constant(init), ())
			param = jnp.clip(param, -1., 1.)
			param = jnp.interp(param, jnp.array([-1., 1.]), jnp.array([0., 1.]))
			param = jnp.interp(jnp.exp(param), jnp.array([1., jnp.e]), jnp.array([a_min, a_max]))
		elif scale_mode == 'log':
			init = jnp.interp(init, jnp.array([a_min, a_max]), jnp.array([-4., 0.]))
			init = jnp.power(10., init)
			init = jnp.interp(init, jnp.array([10.**-4., 1.]), jnp.array([-1.,1.]))
			param = self.param("_"+label, nn.initializers.constant(init), ())
			param = jnp.clip(param, -1., 1.)
			param = jnp.interp(param, jnp.array([-1., 1.]), jnp.array([10.**-4., 1.]))
			param = jnp.interp(jnp.log10(param), jnp.array([-4., 0.]), jnp.array([a_min, a_max]))
		else:
			raise ValueError(f"Unknown scale '{scale_mode}'.")
		self.sow('intermediates', label, param)
		state[zone] = param
		
	@nn.compact
	def __call__(self, x, T: int) -> jnp.array:
		state = self.initialize(x, T)
		state = self.build_interface(state, x, T)
		# convert any numpy arrays to jax numpy arrays
		state = jax.tree_map(jnp.array, state)

		x = jnp.transpose(x, axes=(1, 0))
		state, y = jax.lax.scan(self.tick, state, x)
		y = jnp.transpose(y, axes=(1, 0))
		return y


def test(args):

	import logging

	model = FaustVoice(sample_rate=args.sample_rate)

	log_level = getattr(logging, args.log_level.upper())
	logging.basicConfig(level=log_level, format='%(levelname)s: %(message)s')

	logger = logging.getLogger(__name__)

	logger.info(f"Number of input channels: {model.getNumInputs()}")
	logger.info(f"Number of output channels: {model.getNumOutputs()}")

	json_obj = model.getJSON()
	logger.debug(f"JSON info: {json_obj}")

	key = random.PRNGKey(args.seed)

	if args.input is not None:
		input_audio, _ = librosa.load(args.input, mono=False, sr=args.sample_rate, duration=args.duration)
		if input_audio.ndim == 1:
			input_audio = input_audio.unsqueeze(0)

		N_SAMPLES = input_audio.shape[1]
		N_CHANNELS = input_audio.shape[0]
		assert N_CHANNELS == model.getNumInputs()

		input_audio = FAUSTFLOAT(input_audio)
	else:
		duration_sec = args.duration or 1.  # default to 1 second when making noise.

		N_SAMPLES = int(duration_sec*args.sample_rate)
		N_CHANNELS = model.getNumInputs()

		if args.random:
			input_audio = -1.+2.*random.uniform(key, shape=(N_CHANNELS, N_SAMPLES), dtype=FAUSTFLOAT)
		else:
			input_audio = jnp.zeros((N_CHANNELS, N_SAMPLES), dtype=FAUSTFLOAT)
			input_audio = input_audio.at[:,0].set(1.)

	variables = model.init({'params': key}, input_audio, N_SAMPLES)  
	y, mod_vars = model.apply(variables, input_audio, N_SAMPLES, mutable='intermediates')

	assert y.ndim == 2
	assert y.shape[0] == model.getNumOutputs()
	assert y.shape[1] == input_audio.shape[1]
	assert y.shape[1] == N_SAMPLES

	if args.output is not None:
		from scipy.io import wavfile
		output_audio = np.array(y).T
		wavfile.write(args.output, args.sample_rate, output_audio)

	logger.info("All done!")
		

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser(description='Run a JAX/Flax model converted from Faust code')
	parser.add_argument('-sr', '--sample-rate', type=int, default=44100, help='Sample rate (such as 44100)')
	parser.add_argument('-d', '--duration', type=float, default=None, help='Output duration in seconds')
	parser.add_argument('--random', action='store_true',
		help="Whether the default audio is random. By default it's an impulse.")
	parser.add_argument('--seed', default=0, type=int, help="Seed for random number generator (default: 0)")
	parser.add_argument('-i', '--input', type=str, default=None, help='Filepath for input audio WAV')
	parser.add_argument('-o', '--output', type=str, default=None, help='Filepath for output audio WAV')
	parser.add_argument('--log-level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], 
						help='Set the logger level (default: INFO)')

	args = parser.parse_args()

	test(args)
